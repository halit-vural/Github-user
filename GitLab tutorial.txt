		GitLab in 3 hours

ref:
https://www.youtube.com/watch?v=8aV5AxJrHDg&t=2267s

------  GIT -------
Basic git commands
In Terminal
  git --version
  git init
		new empty repo
  git init repo-name-here
  cd repo-name
  git config --global init.defaultBranch main
		set up default branch
  git branch -m main
  git status
		shows the history
  

''main branch is not used for mid process. it is dangerous. the way is to make a branch for development and do the tests after code. if the tests pass, then you can merge the branch to main. later, you can delete the branch.''

  git add <file-name>
		starts tracking the file for changes. otherwise changes will not be recorded.
		working dir (add)-> staging (commit)-> repository
  git rm --chached <file>...
		unstages the file
  git commit -m "my message about commit"
  git config --global user.name "hvbosna"
		git asks the credential
  git config --global user.email "bosna.halit@gmail.com"
  git log
		list of all commits until now
		(HEAD -> main)  check-out point

Making a separate branch
  git branch <branch-name>
		new branch is added, but we are still in main branch
  git checkout <branch-name>
  git status
		no commits in empty branch
  git log
		HEAD -> <branch>

Merge
  git checkout main
  git merge <source-branch>
  git log --all --oneline
		give all commits
		summarize them in one line each
  git branch -d <branch>

Stash
It works similar to commit but the changes are not seen publicly on the branch. They kept locally.

  git stash push
		the changes are not seen in working directory. they are kept hidden in local
  git stash apply
		it will reapply the changes to working directory
		it will not remove changes from stash
  git stash pop
		it will remove the changes from the list
  git stash list
		shows the change ref in stash

----- GITLAB --------
Introduction
	Group
		manage settings accross multiple projects
		categorize multiple users or projects
		provide cross-project view (issues, merge requests)
	Project
		it is a container for a git repo
		built-in CI/CD
		issue tracking
		collaboration tools (merge req)
	Members
		users or groups
		members are assigned to roles
		roles include permissions to actions on projects or groups

	Merge Requests
		a request to merge one branch into another
		they provide a space to have a conversation with the team about the changes on a branch
		it is the central place through which changes are reviewed and verified

	Issue
		a way to track work related to project
		bug reports, track tasks, request new features, ask questions etc.
		development begins with defining a new issue







Interface

	Projects dashboard
	   top-right
		account mgt
		tasks
		issues
		merge requests
  

	   top-left
		menu
		  dasbboard list

Profile
	edit profile
	  access tokens
		personal tokens relate to your account
	  SSH Keys
		we would add public key for gitlab account. therefore gitlab client can access


Access Token - Define
in Terminal
  generate a key
	>ssh-keygen -t ed25519 -C "GitLab Key Pair"
	use default folder to find easily later
		ed25519 is better than RSA
		-C for comment
	passphrase leave empty

  add the generated public key to GitLab profile
	>cat ~/.ssh/<key-file>
	copy the output
	in GitLab interface
	  profile > preferences
	  SSH Keys > paste into box
		> give a title "GitLab Key Pair"
	  push "Add Key" button
  verify in client (in Terminal)
	ssh -T git@gitlab.com
		'Welcome to GitLab @uname'


Groups
	
	

	



  



